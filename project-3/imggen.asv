function xx = imggen()
%Generating the sources (Doubles indicate tilde, f.eks. xx=x.tilde)
% Vectorize the images
colormap gray;
spock = double(imread('spock2.jpg'));
r2d2 = double(imread('.jpg'));
bender = double(imread('bender.jpg'));

spock=spock(:)';
r2d2=r2d2(:)';
bender=bender(:)';

%Transform sources to mean=0 and unit variance;
spockm=mean(spock);
benderm=mean(bender);
r2d2m=mean(r2d2);
spock=spock-spockm;
spock=spock/std(spock);
bender=bender-benderm;
bender=bender/std(bender);
r2d2=r2d2-r2d2m;
r2d2=r2d2/std(r2d2);
S=[spock;bender;r2d2];

subplot(3,3,1);
imagesc(reshape(spock,550,750));
subplot(3,3,2);
imagesc(reshape(bender,550,750));
subplot(3,3,3);
imagesc(reshape(r2d2,550,750));


% Mixing matrix
A=[1 2 1 ; 3 4 5; 4 1 2];
x=A*S;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EX=(x*x')./length(x);
%Transform x so the covariance matrix E[xx*xx']=I, using the inverse square
%root.

Q=eigroot(EX);
xx=Q\x;
subplot(3,3,4);
imagesc(reshape(xx(1,:),550,750));
subplot(3,3,5);
imagesc(reshape(xx(2,:),550,750));
subplot(3,3,6);
imagesc(reshape(xx(3,:),550,750));
